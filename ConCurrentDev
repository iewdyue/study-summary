# 资源限制

这些资源限制并不会由于使用了多线程并发而提高响应的处理速度，也就是说，这些资源限制可能是多线程处理速度无法提升的瓶颈；

## 硬件资源限制

1. 网卡的上传、下载速度；
2. 硬盘的读写速度；
3. cpu的处理速度；

## 软件资源限制

1. 操作系统支持的socket连接数；
2. 数据库支持的连接数；

# volatile 关键字的底层实现原理

java文件-》 class文件，即字节码文件 -》 通过classloader 加载进JVM -》 转换为汇编语言，机器指令 -》 cpu执行 

java之所以是跨平台的，主要是因为有一层JVM，JVM针对不同的平台进行了适配

volatile关键字的实现原理有以下2点：

1. volatile关键字在写的时候，会刷新缓存值回内存区域；
2. 其它cpu可以感知到总线上刷新值的内存地址值，然后将处理器中的缓冲区中对应内存的缓存值失效；

通过观察volatile关键字编译成的机器指令可以看出，volatile关键字在写的时候，加了一个lock#关键字；该关键字会刷新处理器缓存值回内存区域；

同时，lock# 还会在总线上发送一个信号，其它处理器感知到这个信号后，会将自己处理器缓存区内的对应内存缓存信息失效，从而达到所有线程看到的共享变量的值都是一致的目的；



